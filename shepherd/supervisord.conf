[supervisord]
nodaemon=true

; This watches the uris-to-render queue, renders, and populates the uris-to-crawl queue.
[program:harchived]
command=/python-shepherd/agents/harchiverd.py --log-level DEBUG --amqp-url %(ENV_AMQP_URL)s --webrender-url http://webrender:8000/webtools/domimage heritrix FC-2-uris-to-render uris-to-render /images
autorestart = true
startsecs = 0
stdout_events_enabled = true
stderr_events_enabled = true

; This watches the uris-to-index queue, and POSTs them to the CDX server.
[program:uristocdxserver]
command=/python-shepherd/agents/uristocdxserver.py --amqp-url %(ENV_AMQP_URL)s --cdxserver-url %(ENV_CDXSERVER_URL)s heritrix %(ENV_QUEUE_NAME)s
autorestart = true
startsecs = 0
stdout_events_enabled = true
stderr_events_enabled = true

; This watches the documents-to-index queue, and POSTs them to W3ACT when they are available in Wayback.
;[program:docstow3act]
command=/python-shepherd/agents/docstow3act.py --amqp-url %(ENV_AMQP_URL)s --wb-url %(ENV_WAYBACK_URL)s --w3act-url %(ENV_W3ACT_URL)s --w3act-user %(ENV_W3ACT_USER)s --w3act-pw  %(ENV_W3ACT_PW)s heritrix FC-5-documents-to-catalogue
autorestart = true
startsecs = 0
stdout_events_enabled = true
stderr_events_enabled = true

;
; Example of running a one-off process at startup. 
; Probably not suitable for this use case though, as we need to wait for W3ACT to be up.
;
;[program:testrun]
;command=/setup-testrun.sh
;autorestart = false
;startsecs = 0
;stdout_events_enabled = true
;stderr_events_enabled = true

; For Docker, this ensures all logging is passed into the supervisord logs so it can be seen easily.
; (otherwise, by default, supervisord logs each process to a separate file that can't be seen in the Docker Compose logs)
[eventlistener:stdout]
command = supervisor_stdout
buffer_size = 100
events = PROCESS_LOG
result_handler = supervisor_stdout:event_handler
